import java.util.HashMap;
import java.util.InputMismatchException;
import java.math.BigInteger;

public class Main {

    public static void main(String[] args) {
        //int[] seq = new int[]{ 9, 10, 11, 8 };//"3"
        //int[] seq = new int[]{ 9, 12, 13, 10 };//"2"
        int[] seq = new int[]{5, 9, 8, 2, 1};//"6"
        //int[] seq = new int[]{ 6, 4, 3, 5, 9, 10 };//""
        //int[] seq = new int[] { 5, 2, 4, 1, 9, 8 }; //"10"
        //int[] seq = new int[] { 5, 9, 8, 2, 4, 1 }; //"10"
        //int[] seq = new int[] { 8, 7, 2, 1, 4, 3, 5, 6, 9, 11, 10, 13 };//"330"
        //int[] seq = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };//"1"

        //if (seq.length < 3) return "1";
        int[][] tree = new int[seq.length][];
        tree[0] = new int[]{seq[0], 0, 0}; //root
        for (int i = 1; i < seq.length; i++) {
            tree[i] = new int[]{seq[i], 0, 0}; //nodeVal, leftNodeIndex, rightNodeIndex
            int nodIdx = 0; // start by the root
            while (true) {
                if (seq[i] < tree[nodIdx][0])
                    if (tree[nodIdx][1] == 0) {
                        tree[nodIdx][1] = i;
                        break;
                    } else nodIdx = tree[nodIdx][1];
                else {
                    if (tree[nodIdx][2] == 0) {
                        tree[nodIdx][2] = i;
                        break;
                    } else nodIdx = tree[nodIdx][2];
                }
            }
        }
        //*************************//

        //System.out.println("recCount:-"+"" + (recCount(12, 25))+"-");
        //System.out.println("-"+"" + (getAllPerm(tree, 0))+"-");
        System.out.println("-"+getAllPerm(tree, 0)+"-");
    }

        private static String getAllPerm(int[][] tree, int nodIdx){
            int lnc = tree[nodIdx][1] == 0 ? 0 : 1 + getChildCount(tree, tree[nodIdx][1]);
            int rnc = tree[nodIdx][2] == 0 ? 0 : 1 + getChildCount(tree, tree[nodIdx][2]);

            int totChild = lnc + rnc;
            if (totChild < 2) return ""+1;

            BigInteger lPerm = lnc < 3 ? BigInteger.ONE : new BigInteger(getAllPerm(tree, tree[nodIdx][1]));
            BigInteger rPerm = rnc < 3 ? BigInteger.ONE : new BigInteger(getAllPerm(tree, tree[nodIdx][2]));

            BigInteger bc = new BigInteger(""+recCount(lnc > 0 ? lnc : rnc, totChild));
            return bc.multiply(lPerm).multiply(rPerm).toString();
        }

        private static int getChildCount(int[][] tree, int startNodeIdx){
            int childs = 0;
            if(tree[startNodeIdx][1] != 0){
                childs++;
                childs += getChildCount(tree, tree[startNodeIdx][1]);
            }

            if(tree[startNodeIdx][2] != 0){
                childs++;
                childs += getChildCount(tree, tree[startNodeIdx][2]);
            }

            return  childs;
        }

        private static int recCount(int k, int n){
            if (k > n)
                throw new Error("bad call (k >= n) FR");

            if (k == 1) return n;
            if (k == 0) return 1;

            int count = 0;
            for (int i = 1; i <= n - k; i++) {   //how many will move to the right
                count += recCount(k - 1, k + i - 1);
            }
            return count + 1;
        }
}